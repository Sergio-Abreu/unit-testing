// Code generated by MockGen. DO NOT EDIT.
// Source: store.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	lesson1 "sergio/unit-testing/01_styles"
)

// MockIStore is a mock of IStore interface
type MockIStore struct {
	ctrl     *gomock.Controller
	recorder *MockIStoreMockRecorder
}

// MockIStoreMockRecorder is the mock recorder for MockIStore
type MockIStoreMockRecorder struct {
	mock *MockIStore
}

// NewMockIStore creates a new mock instance
func NewMockIStore(ctrl *gomock.Controller) *MockIStore {
	mock := &MockIStore{ctrl: ctrl}
	mock.recorder = &MockIStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIStore) EXPECT() *MockIStoreMockRecorder {
	return m.recorder
}

// AddInventory mocks base method
func (m *MockIStore) AddInventory(product lesson1.Product, addedQuantity lesson1.Quantity) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddInventory", product, addedQuantity)
}

// AddInventory indicates an expected call of AddInventory
func (mr *MockIStoreMockRecorder) AddInventory(product, addedQuantity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddInventory", reflect.TypeOf((*MockIStore)(nil).AddInventory), product, addedQuantity)
}

// HasEnoughInventory mocks base method
func (m *MockIStore) HasEnoughInventory(product lesson1.Product, desiredQuantity lesson1.Quantity) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasEnoughInventory", product, desiredQuantity)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasEnoughInventory indicates an expected call of HasEnoughInventory
func (mr *MockIStoreMockRecorder) HasEnoughInventory(product, desiredQuantity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasEnoughInventory", reflect.TypeOf((*MockIStore)(nil).HasEnoughInventory), product, desiredQuantity)
}

// RemoveInventory mocks base method
func (m *MockIStore) RemoveInventory(product lesson1.Product, quantity lesson1.Quantity) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveInventory", product, quantity)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveInventory indicates an expected call of RemoveInventory
func (mr *MockIStoreMockRecorder) RemoveInventory(product, quantity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveInventory", reflect.TypeOf((*MockIStore)(nil).RemoveInventory), product, quantity)
}

// GetInventory mocks base method
func (m *MockIStore) GetInventory(product lesson1.Product) lesson1.Quantity {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInventory", product)
	ret0, _ := ret[0].(lesson1.Quantity)
	return ret0
}

// GetInventory indicates an expected call of GetInventory
func (mr *MockIStoreMockRecorder) GetInventory(product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInventory", reflect.TypeOf((*MockIStore)(nil).GetInventory), product)
}
