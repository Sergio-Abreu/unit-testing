// Code generated by MockGen. DO NOT EDIT.
// Source: audit_manager.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIFileSystem is a mock of IFileSystem interface
type MockIFileSystem struct {
	ctrl     *gomock.Controller
	recorder *MockIFileSystemMockRecorder
}

// MockIFileSystemMockRecorder is the mock recorder for MockIFileSystem
type MockIFileSystemMockRecorder struct {
	mock *MockIFileSystem
}

// NewMockIFileSystem creates a new mock instance
func NewMockIFileSystem(ctrl *gomock.Controller) *MockIFileSystem {
	mock := &MockIFileSystem{ctrl: ctrl}
	mock.recorder = &MockIFileSystemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIFileSystem) EXPECT() *MockIFileSystemMockRecorder {
	return m.recorder
}

// GetFiles mocks base method
func (m *MockIFileSystem) GetFiles(directory string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFiles", directory)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetFiles indicates an expected call of GetFiles
func (mr *MockIFileSystemMockRecorder) GetFiles(directory interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFiles", reflect.TypeOf((*MockIFileSystem)(nil).GetFiles), directory)
}

// WriteText mocks base method
func (m *MockIFileSystem) WriteText(filename, text string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteText", filename, text)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteText indicates an expected call of WriteText
func (mr *MockIFileSystemMockRecorder) WriteText(filename, text interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteText", reflect.TypeOf((*MockIFileSystem)(nil).WriteText), filename, text)
}

// ReadAllLines mocks base method
func (m *MockIFileSystem) ReadAllLines(filename string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadAllLines", filename)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadAllLines indicates an expected call of ReadAllLines
func (mr *MockIFileSystemMockRecorder) ReadAllLines(filename interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadAllLines", reflect.TypeOf((*MockIFileSystem)(nil).ReadAllLines), filename)
}
