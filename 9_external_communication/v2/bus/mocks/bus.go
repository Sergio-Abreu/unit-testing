// Code generated by MockGen. DO NOT EDIT.
// Source: bus.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockIMessageBus is a mock of IMessageBus interface
type MockIMessageBus struct {
	ctrl     *gomock.Controller
	recorder *MockIMessageBusMockRecorder
}

// MockIMessageBusMockRecorder is the mock recorder for MockIMessageBus
type MockIMessageBusMockRecorder struct {
	mock *MockIMessageBus
}

// NewMockIMessageBus creates a new mock instance
func NewMockIMessageBus(ctrl *gomock.Controller) *MockIMessageBus {
	mock := &MockIMessageBus{ctrl: ctrl}
	mock.recorder = &MockIMessageBusMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIMessageBus) EXPECT() *MockIMessageBusMockRecorder {
	return m.recorder
}

// SendEmailChangeMessage mocks base method
func (m *MockIMessageBus) SendEmailChangeMessage(userID int, email string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendEmailChangeMessage", userID, email)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendEmailChangeMessage indicates an expected call of SendEmailChangeMessage
func (mr *MockIMessageBusMockRecorder) SendEmailChangeMessage(userID, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendEmailChangeMessage", reflect.TypeOf((*MockIMessageBus)(nil).SendEmailChangeMessage), userID, email)
}

// MockNats is a mock of Nats interface
type MockNats struct {
	ctrl     *gomock.Controller
	recorder *MockNatsMockRecorder
}

// MockNatsMockRecorder is the mock recorder for MockNats
type MockNatsMockRecorder struct {
	mock *MockNats
}

// NewMockNats creates a new mock instance
func NewMockNats(ctrl *gomock.Controller) *MockNats {
	mock := &MockNats{ctrl: ctrl}
	mock.recorder = &MockNatsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNats) EXPECT() *MockNatsMockRecorder {
	return m.recorder
}

// Publish mocks base method
func (m *MockNats) Publish(subject, content string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", subject, content)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish
func (mr *MockNatsMockRecorder) Publish(subject, content interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockNats)(nil).Publish), subject, content)
}
